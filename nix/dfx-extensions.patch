diff --git a/extensions/nns/Cargo.toml b/extensions/nns/Cargo.toml
index 48c86f2..690c55d 100644
--- a/extensions/nns/Cargo.toml
+++ b/extensions/nns/Cargo.toml
@@ -6,7 +6,7 @@ edition.workspace = true
 license.workspace = true
 repository.workspace = true
 publish.workspace = true
-build = "build.rs"
+
 
 [build-dependencies]
 dfx-extensions-utils.workspace = true
diff --git a/extensions/nns/build.rs b/extensions/nns/build.rs
deleted file mode 100644
index 4b2a73e..0000000
--- a/extensions/nns/build.rs
+++ /dev/null
@@ -1,39 +0,0 @@
-use dfx_extensions_utils::dependencies::dfx::NNS_SNS_REPLICA_REV;
-use std::env;
-use std::path::PathBuf;
-
-const BINARY_DEPENDENCIES: &[(&str, &str)] = &[
-    // (downloaded binary name, renamed binary name)
-    ("ic-nns-init", "ic-nns-init"),
-    ("ic-admin", "ic-admin"),
-    ("sns", "sns-cli"),
-];
-
-fn main() {
-    // keep copy of the dependency in the root of the project, so that cargo-dist will be able to package it into a tarball
-    let manifest_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
-    // and also in `target/debug` or `target/release` for development purposes (e.g. cargo run), this is a bit hacky: https://github.com/rust-lang/cargo/issues/9661
-    let target_dir = PathBuf::from(std::env::var("OUT_DIR").unwrap())
-        .parent()
-        .unwrap()
-        .parent()
-        .unwrap()
-        .parent()
-        .unwrap()
-        .to_path_buf();
-    for (binary_name, renamed_binary_name) in BINARY_DEPENDENCIES {
-        let bin_in_manifest_dir = manifest_dir.join(renamed_binary_name);
-        let bin_in_target_dir = target_dir.join(renamed_binary_name);
-        dbg!(&bin_in_manifest_dir, &bin_in_target_dir);
-        dfx_extensions_utils::download_ic_binary(
-            NNS_SNS_REPLICA_REV,
-            binary_name,
-            &bin_in_manifest_dir,
-        );
-        if bin_in_target_dir.exists() {
-            std::fs::remove_file(&bin_in_target_dir).unwrap();
-        }
-        std::fs::create_dir_all(&target_dir).unwrap();
-        std::fs::copy(&bin_in_manifest_dir, &bin_in_target_dir).unwrap();
-    }
-}
diff --git a/extensions/sns/Cargo.toml b/extensions/sns/Cargo.toml
index beb3f5c..30a740d 100644
--- a/extensions/sns/Cargo.toml
+++ b/extensions/sns/Cargo.toml
@@ -6,7 +6,7 @@ edition.workspace = true
 license.workspace = true
 repository.workspace = true
 publish.workspace = true
-build = "build.rs"
+
 
 [build-dependencies]
 dfx-extensions-utils.workspace = true
diff --git a/extensions/sns/build.rs b/extensions/sns/build.rs
deleted file mode 100644
index 01870ab..0000000
--- a/extensions/sns/build.rs
+++ /dev/null
@@ -1,37 +0,0 @@
-use dfx_extensions_utils::dependencies::dfx::NNS_SNS_REPLICA_REV;
-use std::env;
-use std::path::PathBuf;
-
-const BINARY_DEPENDENCIES: &[(&str, &str)] = &[
-    // (downloaded binary name, renamed binary name)
-    ("sns", "sns-cli"),
-];
-
-fn main() {
-    // keep copy of the dependency in the root of the project, so that cargo-dist will be able to package it into a tarball
-    let manifest_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
-    // and also in `target/debug` or `target/release` for development purposes (e.g. cargo run), this is a bit hacky: https://github.com/rust-lang/cargo/issues/9661
-    let target_dir = PathBuf::from(std::env::var("OUT_DIR").unwrap())
-        .parent()
-        .unwrap()
-        .parent()
-        .unwrap()
-        .parent()
-        .unwrap()
-        .to_path_buf();
-    for (binary_name, renamed_binary_name) in BINARY_DEPENDENCIES {
-        let bin_in_manifest_dir = manifest_dir.join(renamed_binary_name);
-        let bin_in_target_dir = target_dir.join(renamed_binary_name);
-        dbg!(&bin_in_manifest_dir, &bin_in_target_dir);
-        dfx_extensions_utils::download_ic_binary(
-            NNS_SNS_REPLICA_REV,
-            binary_name,
-            &bin_in_manifest_dir,
-        );
-        if bin_in_target_dir.exists() {
-            std::fs::remove_file(&bin_in_target_dir).unwrap();
-        }
-        std::fs::create_dir_all(&target_dir).unwrap();
-        std::fs::copy(&bin_in_manifest_dir, &bin_in_target_dir).unwrap();
-    }
-}
